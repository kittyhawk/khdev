#!/bin/bash
#set -x
#######
#  Boston University 
#  Kittyhawk development environment startup script
######

typeset KHDEVDIR=${KHDEV_DIR}

if [[ -z $KHDEVDIR ]]; then
   KHDEVDIR="$(dirname $(type -ap $0))/.."
fi 

if [[ ! -d $KHDEVDIR ]]; then
    echo "ERROR: $KHDEVDIR DOES NOT EXIST"
fi

# constants that can all be overridden with appropriate KHDEV_* VARS
typeset -r DISTRO=${KHDEV_DISTRO:-lenny}
typeset -r RPATH=${KHDEV_RPATH:-$DISTRO} 
typeset -r NODEUSER=${KHDEV_USER:-khdev} 
typeset  KERNEL=${KHDEV_KERNEL:-${KHDEVDIR}/kernels/nbd/uImage} 
typeset  RAMDISK=${KHDEV_RAMDISK:-${KHDEVDIR}/apps/nbd-initrd.cpio.gz.uimg} 
typeset -r DEBIANTUN=${KHDEV_DEBIANTUN:-debian.gtisc.gatech.edu} 
typeset -r BGIPREFIX=${KHDEV_BGIPPREFIX:-172}
typeset -r NBDSERVER=${KHDEV_NBDSERVER:-${KHDEVDIR}/bin/nbd-server}

typeset -r WHENOUT=/tmp/$user.$$.wout 


#globals 
typeset -x debug=0
typeset -x doconsole=0
typeset -x dotun=1
typeset -x host
typeset -x con
typeset -x ip
typeset -x rkey
typeset -x nbdserverip
typeset -x -i nbdserverport
typeset -x nbdserverpid=0

# TRAP on all normal terminations HUP/1, INT/2, QUIT/3, TERM/15, ERR
#trap cleanup 1 2 3 15 EXIT
trap cleanup EXIT

function usage
{
    echo -e \
"\`$(basename $0)' [-h] [-c] [-T] [-k kernel] [-r ramdisk] [-l khctlserver ip] [-K key] <root disk image>\n"\
        "\n"\        
	"  -d debug startup"\
        "  -c open  xterm connected to the console of your khfoxdev host\n"\
        "  -T suppress starting of tunnel\n" \
        "  -k <kernel> overide default kernel for khfoxdev host with specified kernel uimage\n"\
        "  -r <ramdisk> overide default startup ramdisk with specified ramdisk\n"\
	"  -l <khctlserver ip> provide khctlserver ip\n"\
        "  -K <public ssh key> key to install for root access\n"\
        "  -h print this usage\n"
}

processargs()
{
    local    origargs="$@"
    local -i optcount=0  
    
    while getopts "dcThk:r:K:" OPT
      do 
      case $OPT in
	  ("d") debug=1; (( optcount=optcount + 1 ));;
          ("c") doconsole=1; (( optcount=optcount + 1 ));;
          ("T") dotun=0; (( optcount=optcount + 1 ));;
          ("k") KERNEL=$OPTARG; (( optcount=optcount + 2 ));;
          ("r") RAMDISK=$OPTARG; (( optcount=optcount + 2 ));;
          ("l") khctlserver=$OPTARG; (( optcount=optcount + 2));;
          ("K") rkey=$OPTARG; (( optcount=optcount + 2));;
          ("h") usage; exit -1;;
      esac
    done

    shift $optcount
  
    if [[ $# -eq 0 ]]; then
        usage
        exit 1
    fi

    DISK="$1"
}

function killchildren 
{
  echo "killchildren : $1"
  ppid=$1
  if [[ -z $ppid ]]
  then
    ppid=$$
  fi
  children="$(ps --ppid $ppid -o pid --no-headings)" 
  for pid in "$children"
  do
    if [[ -n $pid ]]
    then
      echo "killing $pid"
      kill $pid > /dev/null 2>&1
    fi
  done
}

function cleanup
{
  echo "cleaning up" > /dev/stderr
  if [[ -a $WHENOUT ]]; then
      rm $whenout
  fi
  killchildren
  if (( $nbdserverpid != 0 )); then
    echo "FIXME: Do we really want to do this ??? killing nbd-server $nbdserverpid" > /dev/stderr
    kill $nbdserverpid
  fi
}

function setfdtdate
{
    local now=$(date -u)
    local year=$(date -u -d "$now" +"%-Y")
    local fdtdate="$(printf 'fdt mknode / rtc && fdt set /rtc second "[00 00 00 %02x]" && fdt set /rtc minute "[00 00 00 %02x]" && fdt set /rtc hour "[00 00 00 %02x]" && fdt set /rtc month "[00 00 00 %02x]" && fdt set /rtc mday "[00 00 00 %02x]" && fdt set /rtc year "[00 00 %02x %02x]"\n' `date -u -d "$now" +"%-S %-M %-H %-m %-d"` $(( $year / 256 )) $(( $year % 256 )))"
    echo "$1" | khdo write "$fdtdate"
    return 1;
}

function myIPAddrs
{
   local net
   local ip
   local rest
   local rc

   # If no argument all configured ip address are returned
   # otherwise only for the speccified interface
   ifconfig $1 2> /dev/null | grep 'inet addr' | while read net ip rest
   do
     ip=${ip##addr:}
     if [[ $ip != 127.0.0.1 ]]
     then
        echo $ip
     fi
   done
}

function myInterfaces
{
   local iface
   local rest

   ifconfig | grep Link | while read iface rest
   do
      echo $iface
   done
}

function interfaceAddr
{
  local iface
  local ip

  if [[ -z $1 ]]
  then
    echo "USAGE: internfaceAddr <ip>" >&2
    return -1
  fi

  for iface in $(myInterfaces) 
  do
      ip=$(ifconfig $iface | grep 'inet addr')
      ip=${ip#*:}
      ip=${ip%% *}
      if [[ $ip = "$1"* ]]
      then
        echo $iface
        return 0
      fi
  done

  return -1
}


function gethost
{
  host="$(khget -x -i $NODEUSER 1)"
  con=$(echo "$host" | khdo concmd "echo %con%")
  if [[ -z $con ]]
  then 
   echo "ERROR: not able to get a host node: khget failed: $host" > /dev/stderr
   return -1
  else
   echo "$host" > ${USER}.hostinfo
   ip=$(echo "$host" | khdo peripcmd "echo %ip%")
  fi  
  return 0
}

function testkh
{
   if [[ -z $khctlserver ]]
   then
     echo "ERROR: khctlserver not set.  Either specify on command line or set khctlserver env" > /dev/stderr
     return -1
   else
     if ! ping -c 1 $khctlserver > /dev/null 2>&1 
     then
       echo "ERROR: not able to reach khctlserver:  $khctlserver" > /dev/stderr
       return -1
     fi
   fi

   if ! type -a khget > /dev/null 2>&1 
   then
     echo "ERROR: not able to find khget and other kh tools in your path"
     return -1
   fi

   if ! khget 2>&1  | grep -q khctl > /dev/null 2>&1
   then
     echo "ERROR: khget does not seem to be working :-( $(khget)"
     return -1  
   fi

   if [[ ! -a $KERNEL ]]
   then
     echo "ERROR: not able to find $KERNEL" > /dev/stderr
     return -1
   fi

    if [[ -n $KERNEL && $(file -b $KERNEL) != "u-boot/PPCBoot image" ]]; then
      echo "ERROR: $KERNEL does not seem to be u-boot  image" > /dev/stderr
      exit 1
    fi
  
   if [[ ! -a $RAMDISK ]]
   then
     echo "ERROR: not able to find $RAMDISK" > /dev/stderr
     return -1
   fi

   if [[ ! -a $DISK ]]
   then
     echo "ERROR: not able to find $DISK" > /dev/stderr
     return -1
   fi

   if [[ ! -a $NBDSERVER ]]
   then
     echo "ERROR: not able to file $NBDSERVER" > /dev/stderr
     return -1
   fi

   return 0
}

function prepkh 
{
    if ! cat ${KHGETKEY} | ssh root@$khctlserver 'cat >> .ssh/authorized_keys'
	then
	echo "ERROR: was not able to install $KHGETKEY on to khctlserver ($khctlserver)"
	return -1
    fi
}
    
function loadkernel
{
  echo "$host" | khdo loadkernel $KERNEL
  return 0
}

function loadramdisk
{
  echo "$host" | khdo loadramdisk $RAMDISK  
  return 0
}

function bootnode
{
  when "bash-3.2# " /dev/null ssh $con > $WHENOUT &
  wpid=$(jobs -p %%)
  sleep 0.5

  setfdtdate "$host"

  echo "$host" | khdo writecon "run kboot"

  wait $wpid
  rm $WHENOUT
  return 0
}

function startNBD
{
  local  -i i
  local pidfile=$(mktemp).pid
  local -i start=-1

  for ((i=0; i<10; i++))
  do
   nbdserverport=$(( ($UID + $RANDOM) % (2**16) ))
   echo "$FUNCNAME: $i attempt to start $NDBSERVER -p $pidfile $nbdserverport $DISK"
   $NBDSERVER -p $pidfile $nbdserverport $DISK
   nbdserverpid=$(cat $pidfile)
   if netstat -lntp | grep ":$nbdserverport .*${nbdserverpid}\/$(basename $NBDSERVER)"
   then
     start=0
     break
   fi 
  done

  rm $pidfile
  return $start
}

## main

processargs "$@"


if ! testkh
then
  exit -1
fi

#
#if ! prepkh 
#then
#    exit -1
#fi

# startup nbd-server

nbdserverip=$(myIPAddrs $(interfaceAddr $BGIPREFIX))

if ! startNBD
then
  echo "ERROR: failed to start $NBDSERVER" > /dev/stderr
  exit -1
fi

echo "started $NBDSERVER on $nbdserverip:$nbdserverport with pid: $nbdserverpid serving $DISK"

if [[ $debug = 1 ]]
then
  echo "press enter to continue" > /dev/stderr
  read
fi


echo "khdev: getting a node for your dev host" > /dev/stderr
if ! gethost
then
   exit -1
fi 

if [[ $debug = 1 ]]
then
  echo "host=$host"
  echo "press enter to continue" > /dev/stderr
  read
fi

echo "khdev: loading kernel" > /dev/stderr
if ! loadkernel
then 
   exit -1
fi

if [[ $debug = 1 ]]
then
  echo "host=$host"
  echo "press enter to continue" > /dev/stderr
  read
fi

echo "khdev: loading initrd" > /dev/stderr
if ! loadramdisk 
then
  exit -1
fi

if [[ $debug = 1 ]]
then
  echo "host=$host"
  echo "press enter to continue" > /dev/stderr
  read
fi

echo "khdev: booting host" > /dev/stderr 
if ! bootnode
then
  exit -1
fi

if [[ $doconsole = 1 ]]
then
  echo "$host" | khdo concmd "khxcon %con% &"
fi


commands="nbd-client $nbdserverip $nbdserverport /dev/nbd/nbd0 &"

if [[ $debug = 1 ]]
then
  echo "about to send : $commands"
  echo press enter to continue > /dev/stderr
  read
fi

echo "$host" | khdo writecon $commands

#
#commands="while ! nbd-client -c /dev/nbd/nbd0; do for ((i=0;i<100000;i++)); do true; done; done"

#if [[ $debug = 1 ]]
#then
#  echo "about to send : $commands"
#  echo press enter to continue > /dev/stderr
#  read
#fi

#echo "$host" | khdo writecon $commands


commands="while ! mount /dev/nbd/nbd0 /mnt; do for ((i=0;i<100000;i++)); do true; done; done;"

if [[ $debug = 1 ]]
then
  echo "about to send : $commands"
  echo press enter to continue > /dev/stderr
  read
fi

echo "$host" | khdo writecon $commands


commands="echo kh-\$(cat /proc/device-tree/u-boot-env/bgp_location) > /mnt/$RPATH/etc/hostname;"

if [[ $debug = 1 ]]
then
  echo "about to send : $commands"
  echo press enter to continue > /dev/stderr
  read
fi

echo "$host" | khdo writecon $commands

commands="cat /mnt/$RPATH/etc/hosts > /mnt/$RPATH/etc/hosts.old;"

if [[ $debug = 1 ]]
then
  echo "about to send : $commands"
  echo press enter to continue > /dev/stderr
  read
fi

echo "$host" | khdo writecon $commands

commands="cat /mnt/$RPATH/etc/hosts.old | sed \"s/^127.0.0.1 localhost.*\$/127.0.0.1 localhost kh-\$(cat /proc/device-tree/u-boot-env/bgp_location)/\" > /mnt/$RPATH/etc/hosts;"

if [[ $debug = 1 ]]
then
  echo "about to send : $commands"
  echo press enter to continue > /dev/stderr
  read
fi

echo "$host" | khdo writecon $commands

if [[ -n $rkey ]]
then
 commands="mkdir /mnt/$RPATH/root/.ssh;
 chmod 700 /mnt/$RPATH/root/.ssh;
 echo \"$rkey\" >> /mnt/$RPATH/root/.ssh/authorized_keys2;
 chmod 600 /mnt/$RPATH/root/.ssh/authorized_keys2;"
 if [[ $debug = 1 ]]
 then
   echo "about to send : $commands"
   echo press enter to continue > /dev/stderr
   read
 fi
 echo "$host" | khdo writecon $commands
fi

commands="umount /dev/pts; umount /sys; umount /proc;
 exec chroot /mnt/$RPATH /sbin/init;" 

if [[ $debug = 1 ]]
then
  echo "about to send : $commands"
  echo press enter to continue > /dev/stderr
  read
fi

echo "$host" | khdo writecon $commands

if [[ $debug = 1 ]]
then
  echo press enter to continue > /dev/stderr
  read
fi

if [[ $dotun = 1 ]]
then
  echo "starting a tunnel for you to $DEBIANTUN"
  khmktun $ip $DEBIANTUN >/dev/null 2>&1 &
fi

echo "$host"

echo "sshing to your khdevfox host: $ip"
echo "KEEP THIS OPEN TILL YOU ARE DONE: halt host which finished"
ssh -o LogLevel=QUIET -o UserKnownHostsFile=/dev/null -o CheckHostIP=no -o StrictHostKeyChecking=no -X root@$ip

echo "WARNING: Don't forget to halt your host $ip before running khdev again"

#ssh -o LogLevel=QUIET -o UserKnownHostsFile=/dev/null -o CheckHostIP=no -o StrictHostKeyChecking=no root@$ip halt
